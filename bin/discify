#!/usr/bin/env node

var optimist = require('optimist')
var map = require('map-async')
var open = require('opener')
var path = require('path')
var http = require('http')
var disc = require('../')
var fs = require('fs')
var bl = require('bl')

var argv = optimist
  .wrap(70)
  .usage('$0 [bundle(s)...] {options}')

  .alias('h', 'help')
  .describe('h', 'Displays these instructions.')

  .alias('o', 'output')
  .describe('o', 'Output path of the bundle. Defaults to stdout.')

  .alias('f', 'format')
  .default('f', 'html')
  .describe('f', 'Specify output format: html, json')

  .alias('O', 'open')
  .describe('O', 'Opens disc in a new browser window automatically')

  .alias('m', 'mode')
  .describe('m', 'the default file scale mode to display: should be either "count" or "size". Default: size')

  .argv

if (argv.help) {
  optimist.showHelp()
  return process.exit(1)
}

var files = argv._ || []

files = Array.isArray(files)
  ? files
  : files ? [files] : []

if (!files.length) {
  process.stdin.resume()
  process.stdin.pipe(bl(function(err, data) {
    if (err) throw err
    handle([data])
  }))
} else {
  map(files, function(file, next) {
    fs.readFile(path.resolve(file), next)
  }, function(err, files) {
    handle(files)
  })
}

function handle(bundles) {
  disc.bundle(bundles, {
    mode: argv.mode,
    format: argv.format
  }, function(err, output) {
    if (err) throw err
    if (argv.output && argv.format === 'html') return fs.writeFileSync(argv.output, output)
    if (argv.output && argv.format === 'json') return fs.writeFileSync(argv.output, JSON.stringify(output, null, 2))
    if (argv.format === 'json') return console.log(JSON.stringify(output, null, 2))
    if (!argv.open) return console.log(output)

    // Create a temporary HTTP server, serve up
    // the index.html page and then close the
    // process ASAP
    var server = http.createServer()

    server.on('request', function(req, res) {
      if (req.url === '/favicon.ico') {
        return res.end('missing') // PRs welcome :)
      }

      res.once('finish', function() {
        setTimeout(function() {
          process.exit()
        }, 500)
      })

      res.setHeader('content-type', 'text/html')
      res.end(html)
    }).listen(12999, function(err) {
      if (err) throw err
      open('http://localhost:12999/')
    })
  })
}
